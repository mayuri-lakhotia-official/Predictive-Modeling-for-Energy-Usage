{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP5pFoGqq5jYBUzrtdRsPbn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6LkZI1qdDGjK","executionInfo":{"status":"ok","timestamp":1744437535895,"user_tz":-330,"elapsed":28662,"user":{"displayName":"12_Mayuri Lakhotia","userId":"08817505002544315700"}},"outputId":"f2c16c1b-5c6b-4849-99a6-157203b298bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive/Predictive_Modeling_for_Energy_Usage\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/Predictive_Modeling_for_Energy_Usage\n"]},{"cell_type":"code","source":["# Install Gradio\n","!pip install -q gradio\n","\n","# Import libraries\n","import gradio as gr\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import load_model\n","import joblib\n","import os\n","\n","# Load model and scaler\n","model = load_model(\"LSTM-Model.h5\")\n","scaler = joblib.load(\"scaler.pkl\")\n","\n","# Forecast function\n","# time_steps = 60\n","def forecast_consumption(n_days=60):\n","    # Load dataset\n","    df = pd.read_csv(\"events.csv\", parse_dates=[\"Start time UTC\"], index_col=\"Start time UTC\")\n","    df_daily = df.resample(\"D\").sum()\n","\n","    # Rename column if needed\n","    if \"Electricity consumption in Finland\" in df_daily.columns:\n","        df_selected = df_daily[[\"Electricity consumption in Finland\"]]\n","    else:\n","        df_selected = df_daily.iloc[:, [0]]\n","\n","    # Scale input\n","    scaled_input = scaler.transform(df_selected.values)\n","\n","    # Forecast loop\n","    predictions = []\n","    temp_scaled = scaled_input.copy()\n","    for _ in range(n_days):\n","        X_input = temp_scaled[-60:]\n","        X_input = np.reshape(X_input, (1, X_input.shape[0], X_input.shape[1]))\n","        pred_scaled = model.predict(X_input, verbose=0)\n","        predictions.append(pred_scaled[0][0])\n","        temp_scaled = np.vstack([temp_scaled, [[pred_scaled[0][0]]]])\n","\n","    # Inverse scale\n","    predictions = np.array(predictions).reshape(-1, 1)\n","    predicted_actual = scaler.inverse_transform(predictions)\n","\n","    # Date index\n","    last_date = df_selected.index[-1]\n","    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=n_days)\n","\n","    # Forecast DataFrame\n","    forecast_df = pd.DataFrame({\n","        \"Day Number\": [f\"Day {i+1}\" for i in range(n_days)],\n","        \"Date\": future_dates.date,\n","        \"Predicted Consumption (MWh)\": predicted_actual.flatten()\n","    })\n","\n","    forecast_df.to_csv(\"electricity_forecast_n_days.csv\", index=False)\n","\n","    # Plot\n","    plt.figure(figsize=(12, 6))\n","    plt.plot(df_selected[-90:], label=\"Historical Consumption\")\n","    plt.plot(future_dates, predicted_actual, label=f\"Predicted ({n_days} Days)\", color='orange')\n","    plt.xlabel(\"Date\")\n","    plt.ylabel(\"Electricity Consumption (MWh)\")\n","    plt.title(\"Electricity Consumption Forecast for Finland\")\n","    plt.legend()\n","    plt.grid(True)\n","    plt.tight_layout()\n","\n","    return forecast_df, plt.gcf(), \"electricity_forecast_n_days.csv\"\n","\n","# Gradio UI\n","with gr.Blocks() as demo:\n","    gr.HTML(\"<h1 style='text-align:center; color:darkblue;'>‚ö° Predictive Modeling for Energy Usage - Finland </h1>\")\n","    gr.Markdown(\"üîç **Forecast Energy Consumption for the next 'n' days using an LSTM model.**\")\n","\n","    with gr.Row():\n","        n_days_input = gr.Slider(7, 365, value=60, step=1, label=\"Select Forecast Days\")\n","\n","    forecast_button = gr.Button(\"üîÆ Generate Forecast\")\n","\n","    with gr.Tab(\"üìä Forecast Data\"):\n","        df_output = gr.Dataframe(label=\"Forecast Results\", wrap=True)\n","\n","    with gr.Tab(\"üìà Forecast Graph\"):\n","        plot_output = gr.Plot(label=\"Electricity Forecast Curve\")\n","\n","    with gr.Tab(\"‚¨áÔ∏è Download CSV\"):\n","        csv_output = gr.File(label=\"Download Forecast CSV\")\n","\n","    forecast_button.click(fn=forecast_consumption,\n","                          inputs=n_days_input,\n","                          outputs=[df_output, plot_output, csv_output])\n","\n","# Launch UI\n","demo.launch()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":643},"id":"XfMWrpuFDWHe","executionInfo":{"status":"ok","timestamp":1744441389967,"user_tz":-330,"elapsed":12566,"user":{"displayName":"12_Mayuri Lakhotia","userId":"08817505002544315700"}},"outputId":"3fea9061-71ce-4b90-eb07-561f19bb7157"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stdout","text":["Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n","\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","* Running on public URL: https://6857e79f0ddba5a7bc.gradio.live\n","\n","This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div><iframe src=\"https://6857e79f0ddba5a7bc.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":[]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":[],"metadata":{"id":"MfX_rzb3DuqM"},"execution_count":null,"outputs":[]}]}